syntax = "proto3";

package user;

// Service utilisateur pour validation des permissions
service UserService {
  // Valider les permissions d'envoi de message
  rpc ValidateMessagePermissions(MessagePermissionRequest) returns (MessagePermissionResponse);
  
  // Vérifier si un utilisateur peut rejoindre une conversation
  rpc ValidateConversationAccess(ConversationAccessRequest) returns (ConversationAccessResponse);
  
  // Obtenir la liste des participants actifs d'une conversation
  rpc GetConversationParticipants(ParticipantsRequest) returns (ParticipantsResponse);
  
  // Vérifier les blocages entre utilisateurs
  rpc CheckUserBlocks(BlockCheckRequest) returns (BlockCheckResponse);
}

// Messages pour validation des permissions
message MessagePermissionRequest {
  string sender_id = 1;
  string conversation_id = 2;
  repeated string participant_ids = 3;
  string message_type = 4; // "text", "media", "system"
}

message MessagePermissionResponse {
  bool permission_granted = 1;
  string reason = 2;
  repeated string allowed_recipients = 3;
  repeated string blocked_recipients = 4;
}

// Messages pour accès conversation
message ConversationAccessRequest {
  string user_id = 1;
  string conversation_id = 2;
  string action = 3; // "join", "leave", "read", "write"
}

message ConversationAccessResponse {
  bool access_granted = 1;
  string reason = 2;
  map<string, bool> permissions = 3; // read, write, admin, etc.
}

// Messages pour participants
message ParticipantsRequest {
  string conversation_id = 1;
  bool include_inactive = 2;
}

message ParticipantsResponse {
  repeated Participant participants = 1;
  int32 total_count = 2;
}

message Participant {
  string user_id = 1;
  string role = 2; // "member", "admin", "owner"
  bool is_active = 3;
  int64 joined_at = 4;
  int64 last_seen = 5;
}

// Messages pour vérification des blocages
message BlockCheckRequest {
  string user_id = 1;
  repeated string target_user_ids = 2;
}

message BlockCheckResponse {
  map<string, bool> is_blocked = 1; // user_id -> blocked status
  map<string, bool> has_blocked = 2; // user_id -> has blocked sender
}
