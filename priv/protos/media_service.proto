syntax = "proto3";

package media;

// Service média pour validation et liaison
service MediaService {
  // Valider l'accès à un média
  rpc ValidateMediaAccess(MediaAccessRequest) returns (MediaAccessResponse);
  
  // Lier un média à un message
  rpc LinkMediaToMessage(MediaLinkRequest) returns (MediaLinkResponse);
  
  // Obtenir les métadonnées d'un média
  rpc GetMediaMetadata(MediaMetadataRequest) returns (MediaMetadataResponse);
  
  // Valider les métadonnées avant envoi
  rpc ValidateMediaMetadata(MediaValidationRequest) returns (MediaValidationResponse);
}

// Messages pour validation d'accès
message MediaAccessRequest {
  string media_id = 1;
  string user_id = 2;
  string conversation_id = 3;
  string access_type = 4; // "read", "link", "download"
}

message MediaAccessResponse {
  bool access_granted = 1;
  string reason = 2;
  MediaMetadata metadata = 3;
  repeated string permissions = 4;
}

// Messages pour liaison média-message
message MediaLinkRequest {
  string media_id = 1;
  string message_id = 2;
  string conversation_id = 3;
  string user_id = 4;
}

message MediaLinkResponse {
  bool success = 1;
  string message = 2;
  string link_id = 3;
  int64 linked_at = 4;
}

// Messages pour métadonnées
message MediaMetadataRequest {
  string media_id = 1;
  string user_id = 2;
  bool include_thumbnails = 3;
}

message MediaMetadataResponse {
  bool found = 1;
  MediaMetadata metadata = 2;
}

message MediaMetadata {
  string media_id = 1;
  string filename = 2;
  string content_type = 3;
  int64 file_size = 4;
  int32 width = 5;
  int32 height = 6;
  int32 duration_seconds = 7;
  string upload_status = 8; // "pending", "processing", "ready", "error"
  repeated string thumbnail_urls = 9;
  map<string, string> custom_metadata = 10;
  int64 created_at = 11;
  int64 expires_at = 12;
}

// Messages pour validation métadonnées
message MediaValidationRequest {
  string filename = 1;
  string content_type = 2;
  int64 file_size = 3;
  string user_id = 4;
  string conversation_id = 5;
}

message MediaValidationResponse {
  bool is_valid = 1;
  repeated string errors = 2;
  repeated string warnings = 3;
  map<string, string> suggested_metadata = 4;
}
