syntax = "proto3";

package messaging;

// Service principal exposé par le messaging-service
service MessagingService {
  // Notifier d'un événement de conversation (nouveau membre, etc.)
  rpc NotifyConversationEvent(ConversationEventRequest) returns (ConversationEventResponse);
  
  // Lier un média à un message
  rpc LinkMediaToMessage(LinkMediaRequest) returns (LinkMediaResponse);
  
  // Obtenir des statistiques de conversation
  rpc GetConversationStats(ConversationStatsRequest) returns (ConversationStatsResponse);
  
  // Notifier de la création d'un groupe
  rpc NotifyGroupCreation(GroupCreationRequest) returns (GroupCreationResponse);
}

// Messages pour les événements de conversation
message ConversationEventRequest {
  string conversation_id = 1;
  string event_type = 2; // "member_added", "member_removed", "settings_changed"
  string user_id = 3;
  map<string, string> metadata = 4;
  int64 timestamp = 5;
}

message ConversationEventResponse {
  bool success = 1;
  string message = 2;
  string event_id = 3;
}

// Messages pour liaison média
message LinkMediaRequest {
  string message_id = 1;
  string media_id = 2;
  string media_type = 3; // "image", "video", "audio", "document"
  map<string, string> metadata = 4;
}

message LinkMediaResponse {
  bool success = 1;
  string message = 2;
  string link_id = 3;
}

// Messages pour statistiques de conversation
message ConversationStatsRequest {
  string conversation_id = 1;
  string user_id = 2;
  repeated string metrics = 3; // "message_count", "unread_count", "last_activity"
}

message ConversationStatsResponse {
  bool success = 1;
  map<string, int64> stats = 2;
  int64 last_updated = 3;
}

// Messages pour création de groupe
message GroupCreationRequest {
  string group_id = 1;
  string creator_id = 2;
  repeated string member_ids = 3;
  string group_name = 4;
  map<string, string> settings = 5;
}

message GroupCreationResponse {
  bool success = 1;
  string message = 2;
  string conversation_id = 3;
}
