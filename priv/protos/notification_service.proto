syntax = "proto3";

package notification;

// Service de notifications pour envoi de notifications push
service NotificationService {
  // Envoyer une notification pour un nouveau message
  rpc SendMessageNotification(MessageNotificationRequest) returns (NotificationResponse);
  
  // Envoyer des notifications en lot
  rpc SendBulkNotifications(BulkNotificationRequest) returns (BulkNotificationResponse);
  
  // Notifier d'un événement de conversation
  rpc SendConversationNotification(ConversationNotificationRequest) returns (NotificationResponse);
  
  // Marquer des notifications comme lues
  rpc MarkNotificationsAsRead(MarkReadRequest) returns (MarkReadResponse);
}

// Messages pour notifications de message
message MessageNotificationRequest {
  string message_id = 1;
  string conversation_id = 2;
  string sender_id = 3;
  repeated string recipient_ids = 4;
  string message_type = 5; // "text", "media", "system"
  string preview_text = 6; // Aperçu sécurisé du message
  map<string, string> metadata = 7;
  NotificationPriority priority = 8;
  bool silent = 9;
}

message NotificationResponse {
  bool success = 1;
  string message = 2;
  string notification_id = 3;
  repeated DeliveryStatus delivery_statuses = 4;
}

message DeliveryStatus {
  string user_id = 1;
  string device_id = 2;
  bool delivered = 3;
  string error_message = 4;
  int64 delivered_at = 5;
}

// Messages pour notifications en lot
message BulkNotificationRequest {
  repeated MessageNotificationRequest notifications = 1;
  bool fail_on_error = 2;
  int32 batch_size = 3;
}

message BulkNotificationResponse {
  int32 total_sent = 1;
  int32 total_failed = 2;
  repeated NotificationResponse results = 3;
  repeated string errors = 4;
}

// Messages pour notifications de conversation
message ConversationNotificationRequest {
  string conversation_id = 1;
  string event_type = 2; // "member_added", "member_removed", "conversation_created"
  string actor_id = 3; // Utilisateur qui a déclenché l'événement
  repeated string recipient_ids = 4;
  string title = 5;
  string body = 6;
  map<string, string> data = 7;
  NotificationPriority priority = 8;
}

// Messages pour marquer comme lu
message MarkReadRequest {
  string user_id = 1;
  repeated string notification_ids = 2;
  string conversation_id = 3; // Si fourni, marque toutes les notifications de cette conversation
  int64 read_at = 4;
}

message MarkReadResponse {
  bool success = 1;
  int32 marked_count = 2;
  repeated string failed_notification_ids = 3;
}

// Énumération pour priorité des notifications
enum NotificationPriority {
  LOW = 0;
  NORMAL = 1;
  HIGH = 2;
  URGENT = 3;
}
