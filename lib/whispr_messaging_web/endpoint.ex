defmodule WhisprMessagingWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :whispr_messaging

  # The session will be stored in the cookie and signed,
  # this means its contents can be read but not tampered with.
  # Set :encryption_salt if you would also like to encrypt it.
  @session_options [
    store: :cookie,
    key: "_whispr_messaging_key",
    signing_salt: "r/dAr0Jr",
    same_site: "Lax"
  ]

  socket "/live", Phoenix.LiveView.Socket,
    websocket: [connect_info: [session: @session_options]],
    longpoll: [connect_info: [session: @session_options]]

  # Socket pour les WebSockets de messagerie
  socket "/socket", WhisprMessagingWeb.UserSocket,
    websocket: [
      connect_info: [:peer_data, :trace_context_headers, :x_headers, :uri]
    ],
    longpoll: [
      connect_info: [:peer_data, :trace_context_headers, :x_headers, :uri]
    ]

  # Serve at "/" the static files from "priv/static" directory.
  #
  # When code reloading is disabled (e.g., in production),
  # the `gzip` option is enabled to serve compressed
  # static files generated by running `phx.digest`.
  plug Plug.Static,
    at: "/",
    from: :whispr_messaging,
    gzip: not code_reloading?,
    only: WhisprMessagingWeb.static_paths()

  # Code reloading can be explicitly enabled under the
  # :code_reloader configuration of your endpoint.
  if code_reloading? do
    plug Phoenix.CodeReloader
    plug Phoenix.Ecto.CheckRepoStatus, otp_app: :whispr_messaging
  end

  plug Phoenix.LiveDashboard.RequestLogger,
    param_key: "request_logger",
    cookie_key: "request_logger"

  plug Plug.RequestId
  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]

  # Health check: rÃ©ponse rapide 200 OK sur /health
  plug :healthcheck

  plug Plug.Parsers,
    parsers: [:urlencoded, :multipart, :json],
    pass: ["*/*"],
    json_decoder: Phoenix.json_library()

  plug Plug.MethodOverride
  plug Plug.Head
  plug Plug.Session, @session_options
  plug WhisprMessagingWeb.Router

  defp healthcheck(%Plug.Conn{request_path: "/health"} = conn, _opts) do
    conn
    |> Plug.Conn.send_resp(200, "OK")
    |> Plug.Conn.halt()
  end
  defp healthcheck(conn, _opts), do: conn
end
